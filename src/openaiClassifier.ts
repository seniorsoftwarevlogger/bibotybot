import { OpenAI } from "openai";
import dotenv from "dotenv";

dotenv.config();

const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

const spamExamples = [
  "–ò—ây –ª—é–¥e–π –∂–µ–ªa—é—â–∏—Ö —Ö–æ—Äo—à–æ –∑a—Ä–∞–±–∞—Ç—ã–≤a—Ç—å –≤ —É–¥–∞–ªe–Ω–Ω–æ–º —Ñop–º–∞—Ç–µ. –óa –ø–æ–¥—Äo–±–Ω–æ—Å—Ç—è–º–∏ –ø–∏—à–∏—Çe –≤ –ª–∏—á–Ω—ãe —Å–æo–±—âe–Ω–∏—è.",
  "E—Å–ª–∏ —É —Ç–µ–±—è e—Å—Ç—å 30 –º–∏–Ω—É—Ç c–≤–æ–±–æ–¥–Ω—ã—Ö –≤ –¥e–Ω—å –∏ –∂e–ª–∞–Ω–∏–µ –∑a—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å. –¢o–≥–¥–∞ –∂–¥y –≤ –õC. O—Ç 300$ –≤ –¥e–Ω—å.",
  "3–¥pa–≤c—Ç–≤y–π—Çe, –∏—ây –øap—Ç–Ω—ë—Ä–æ–≤ –¥–ª—è co—Ç—Äy–¥–Ω–∏—á–µ—Å—Ç–≤a. C–≤o–±o–¥–Ω—ã–π –≥pa—Ñ–∏–∫üëå –üp–∏—è—Ç–Ω—ã–π 3apa–±o—Ço–∫ o—Ç 200$ –≤ –¥e–Ω—å Ec–ª–∏ –∏–Ω—Çepec—Ée—Ç –øo–¥po–±–Ωa—è –∏–Ω—Ñop–ºa—Ü–∏—è " +
    " –≤ –ª–∏—á–Ω—ã–µ —Åoo–±—â–µ–Ω–∏—è",
  "–ù–∞–±–∏—Ä–∞—é –∫–æ–º–∞–Ω–¥—É –¥–ª—è –ø–∞—Ä—Ç–Ω–µ—Ä—Å—Ç–≤–∞ –Ω–∞ –∑–≤–∞–∏–º–æ–≤—ã–≥–æ–¥–Ω–æ–π –æ—Å–Ω–æ–≤–µ. –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—Ä–∏–±—ã–ª—å –Ω–∞ –ø–∞—Å–∏–≤–µ. –ñ–¥—É –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö.",
  "–îo–±—Ä—ã–π –¥e–Ω—å! –ò—âe–º –ª—é–¥e–π –¥–ª—è —Åo–¥—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–∞  o—Ç 21 –≥o–¥–∞. –ï–∂e–¥–Ω–µ–≤–Ω—ã–π –¥o—Ö–æ–¥ –æ—Ç 600 –¥–ª—Ä. –ü–∏—à–∏—Ç–µ + –≤ –ª–∏—á–Ω—ã–µ —Å–º—Å –∫—Ç–æ –∑–∞–∏–Ω—Ç–µ—Ä–µ—Å–æ–≤–∞–Ω.",
  "—Ö–æ—á–µ—à—å ·¥ç–æ–∏ –Ω—é–¥c—ã –∏  ô–∏–¥oc—ã –∫a–∫ –º–µ ú—è –∏·¥çe—é—Ç ? –ø–æ–¥–ø–∏c—ã–≤–∞–πc—è —Ç–æ–≥–¥–∞ üî•",
  "–∑·¥Ä—à—ë–ª –±—ã –∫—Ç·¥è  ô –º–µ–Ω—è üòÑ",
  "—Ö–æ—á–µ—à—å –º–µ–Ω—è?"
];

export async function classifyMessageOpenAI(message: string): Promise<boolean> {
  const prompt = `
–û–ø—Ä–µ–¥–µ–ª–∏, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —ç—Ä–æ—Ç–∏—á–µ—Å–∫–∏–º —Å–ø–∞–º–æ–º –∏–ª–∏ –≤–æ–≤–ª–µ—á–µ–Ω–∏–µ–º –≤ —Å–æ–º–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–µ. –£—á–∏—Ç—ã–≤–∞–π —Å–ª–µ–¥—É—é—â–∏–µ –ø—Ä–∏–º–µ—Ä—ã —Å–ø–∞–º-—Å–æ–æ–±—â–µ–Ω–∏–π:

${spamExamples.map((example) => `- ${example}`).join("\n")}

–°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏:
"${message}"

–Ø–≤–ª—è–µ—Ç—Å—è –ª–∏ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–ø–∞–º–æ–º? –û—Ç–≤–µ—Ç—å —Ç–æ–ª—å–∫–æ "–¥–∞" –∏–ª–∏ "–Ω–µ—Ç".
`;

  try {
    const response = await openai.chat.completions.create({
      model: "gpt-4o-mini",
      messages: [
        {
          role: "system",
          content: "–¢—ã ‚Äî —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Å–ø–∞–º—É. –¢—ã –æ—Ç–≤–µ—á–∞–µ—à—å —Ç–æ–ª—å–∫–æ '–¥–∞' –∏–ª–∏ '–Ω–µ—Ç'.",
        },
        {
          role: "user",
          content: prompt,
        },
      ],
      max_tokens: 1,
      n: 1,
      stop: null,
      temperature: 0.5,
    });

    const answer = response.choices[0].message.content?.trim().toLowerCase();
    return answer === "–¥–∞";
  } catch (error) {
    console.error("Error classifying message with OpenAI:", error);
    return false;
  }
}
